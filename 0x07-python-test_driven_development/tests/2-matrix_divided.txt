================================
2-matrix_divided.py module library
================================

This library has a function ''matrix_divided()''.

Operation
=========

''matrix_divided(matrix, div)'' takes in 2 arguments. The first argument is a
matrix that has either integers or numbers.
The second argument is an integer or a number that each element of the matrix
will be divided by.
The function then returns a new matrix that is of the same size but having
elements that are a result of the division rounded off to 2 decimal places.

Error handling
==============
Matrix must be a list of lists of integers or floats, otherwise raise a
TypeError exception with the message matrix must be a matrix
(list of lists) of integers/floats.
Each row of the matrix must be of the same size, otherwise raise a TypeError
exception with the message Each row of the matrix must have the same size.
Div must be a number (integer or float), otherwise raise a TypeError
exception with the message div must be a number.
Div canâ€™t be equal to 0, otherwise raise a ZeroDivisionError exception with
the message division by zero.

Import module
=============
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

positive int matrix, positive int:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

positive int matrix, 0:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

missing 1 argument:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

missing 2 arguments:
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

int, int:
    >>> matrix_divided(9, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

float matrix, float int:
    >>> matrix_divided([[6.0, 12.0], [18.0, 24.0]], 6.0)
    [[1.0, 2.0], [3.0, 4.0]]

string, positive int:
    >>> matrix_divided("ALX", 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

positive int matrix, char:
    >>> matrix_divided([[10, 5], [20, 40]], 'c')
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

unequal rows, positive int:
    >>> matrix_divided([[4, 8, 12], [5, 7]], 10)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

negative int matrix, negative int:
    >>> matrix_divided([[-1, -2, -3], [-4, -5, -6]], -3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

positive int matrix, infinity float:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
