================================
101-lazy_matrix_mul.py module library
================================

This library has a function ''lazy_matrix_mul()''

Operation
=========
''lazy_matrix_mul(m_a, m_b)'' takes in 2 arguments. The arguments are matrices
that should be list of lists of integers or floats.
The function then returns the result of the product of the two matrices.

Error handling
==============
m_a and m_b must be an list of lists of integers or floats:
If m_a or m_b is not a list: raise a TypeError exception with the message m_a
must be a list or m_b must be a list.
If m_a or m_b is not a list of lists: raise a TypeError exception with the
message m_a must be a list of lists or m_b must be a list of lists.
If m_a or m_b is empty (it means: = [] or = [[]]): raise a ValueError
exception with the message m_a can't be empty or m_b can't be empty.
If one element of those list of lists is not an integer or a float: raise a
TypeError exception with the message m_a should contain only integers or floats
or m_b should contain only integers or float.
If m_a or m_b is not a rectangle (all ‘rows’ should be of the same size): raise
a TypeError exception with the message each row of m_a must be of the same
size or each row of m_b must be of the same size.
If m_a and m_b can’t be multiplied: raise a ValueError exception with the
message m_a and m_b can't be multiplied.

Import module
=============
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

integers
    >>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
    array([[ 58,  64],
           [139, 154]])

    >>> lazy_matrix_mul([1, 2, 3], [[7, 8], [9, 10], [11, 12]])
    array([58, 64])

    >>> lazy_matrix_mul([[7, 8], [9, 10], [11, 12]], [1, 2, 3])
    Traceback (most recent call last):
    ...
    ValueError: shapes (3,2) and (3,) not aligned: 2 (dim 1) != 3 (dim 0)

floats
    >>> lazy_matrix_mul([[0.5, 1.0], [0.5, 1.0]], [[0.5], [1.0]])
    array([[1.25],
           [1.25]])

missing 1 argument
    >>> lazy_matrix_mul([[10, 14, 13], [23, 89, 78]])
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

missing 2 arguments
    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

strings
    >>> lazy_matrix_mul([["ALX", "School"], [1, 2]], [[4, 5], [1, 2]])
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul("ALX", [[4, 5], [1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([[4, 5], [1, 2]], "ALX")
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([[4, 5], [1, 2]], [["ALX", "School"], ["Prisca", "Ndiritu"]])
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

empty list
    >>> lazy_matrix_mul([[4, 5], [1, 2]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

    >>> lazy_matrix_mul([], [[4, 5], [1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

uneven rows
    >>> lazy_matrix_mul([[4, 5], [1]], [[4, 5], [6, 7]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

uneven rows
    >>> lazy_matrix_mul([[4, 5], [6, 7]], [[4, 5], [1]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

difference in row and columns
    >>> lazy_matrix_mul([[4, 5], [1, 2]], [[1], [2], [3]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (3,1) not aligned: 2 (dim 1) != 3 (dim 0)
