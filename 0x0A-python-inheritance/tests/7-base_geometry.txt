=================================
7-base_geometry.py module library
=================================

This module has one class that has 2 methods

Operation
=========
The are 2 public instance methods. area(self) and
integer_validator(self, name, value)

Error handling
==============
The method area(self): raises an Exception with the message area() is not implemented.
The method integer_validator(self, name, value), validates value,
it assumes name is always a string
if value is not an integer: raise a TypeError exception, with the message
<name> must be an integer
if value is less or equal to 0: raise a ValueError exception with the message
<name> must be greater than 0


Import module
=============
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

positive int
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

negative int
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)

zero
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
    ...
    ValueError: name must be greater than 0

negative
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", -10)
    Traceback (most recent call last):
    ...
    ValueError: name must be greater than 0

string
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

missing one argument
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

missing 2 arguments
    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
